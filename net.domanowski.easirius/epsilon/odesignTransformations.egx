import "eolCommon/StringUtils.eol";
import "eolCommon/StringUtils.eol";

// find target viewpoint and its diagram description, which should be translated
pre findTargets {
	var targetViewpointWithDiagramDescription : Viewpoint = null;
	var targetDiagramDescription : DiagramDescription = null;
	var targetLayer : Layer = null;
	
	var viewpoints = Viewpoint.all();
	
	// find viewpoints with diagram representations
	// such a viewpoint is found, set target variables
	// for this proof of concept, this will take the very first viewpoint with its first DiagramDescription
	for (viewpoint in viewpoints) {
		var cancelLoop : Boolean = false;
		if(not cancelLoop){
			for (representation in viewpoint.ownedRepresentations) { 
				if(representation.isTypeOf(DiagramDescription)){
					targetViewpointWithDiagramDescription = viewpoint;
					targetDiagramDescription = representation;
					cancelLoop = true;
					break;
				}
			}
		}
	}
	
	// get default layer from diagram description
	targetLayer = targetDiagramDescription.defaultLayer;
}

// find model meta data
pre findModelMetaData{
	var importNamespacePrefix : String = getPackageNameFromQualifiedName(targetDiagramDescription.domainClass);
}

// find creation tools
// ignore subsections
pre findCreationTools {
	var nodeCreationDescriptions = new Sequence;
	var containerCreationDescription = new Sequence;
	var edgeCreationDescriptions = new Sequence;
	
	for (toolSection in targetLayer.toolSections) { 
		for (tool in toolSection.ownedTools) { 
			if(tool.isTypeOf(NodeCreationDescription)){
				nodeCreationDescriptions.add(tool);
			}
			if(tool.isTypeOf(ContainerCreationDescription)){
				containerCreationDescription.add(tool);
			}
			if(tool.isTypeOf(EdgeCreationDescription)){
				edgeCreationDescriptions.add(tool);
			}
		}
	}
}

// Generate index.ts
// contains imports for the other modules
rule generateIndex transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/indexTemplate.egl"
	target : pathPrefix + "src/index.ts"
}

// Generate Editor
// The editor contains the specification of the model and the view
rule generateEditor transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/editorTemplate.egl"
	target : pathPrefix + "src/editor/editor.ts"
}

// Generate Editor Tools
// The tools contain specifications for JointJS tools, e.g., selection tool or remove tool
rule generateEditorTools transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/editorToolsTemplate.egl"
	target : pathPrefix + "src/editor/editorTools.ts"
}

// Rule 0.3 - Generate Editor markup (HTML)
// The editor contains the specification of the model and the view
rule generateEditorMarkup transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/editorHTMLMarkup.egl"
	target : pathPrefix + "src/editorMarkup/index.html"
}

// Generate file with DOM identifiers.
// These are used for generating the editor canvas as well as the tools.
rule generateCommonVariables transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/domIdentifier.egl"
	target : pathPrefix + "src/const/domIdentifier.ts"
}

// Generate serialization
rule generateSerialization transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/serialization.egl"
	target : pathPrefix + "src/serialization/modelSerialization.ts"
}

// Generate constants for JointJS props
// for using newShape.prop(propConstantName)
rule generateJointJsPropConstants transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/jointJsModelProps.egl"
	target : pathPrefix + "src/const/jointJsPropMapping.ts"
}

// Generate model synchronization bus
rule generateModelSynchronizationBus transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/modelSynchronizationBus.egl"
	target : pathPrefix + "src/modelSynchronization/modelSynchronizationBus.ts"
}


// Get file extension from the translatable Viewpoint, store it as a constant in editor metadata file
//	identifier: serializedFileExtension
rule generateModelFileExtension transform viewpoint : Viewpoint in: targetViewpointWithDiagramDescription.asSequence() {
	guard : targetViewpointWithDiagramDescription != null
	template : "eglTemplates/odesignToTs/modelFileExtension.egl"
	target : pathPrefix + "src/const/editorMetadata.ts"
}

// Get context element from diagram representation, generate a root element factory, which instantiates the root element
// identifier: createRootElement()
// Furthermore has a reference to the the factory of the EMF implementation.

// generates the element factory for the creation of the current root element
// the component further exports a 
rule generateSemanticModelManagementComponent transform diagramDescription : DiagramDescription in: targetDiagramDescription.asSequence() {
	guard : targetDiagramDescription != null
	parameters : Map {
		"importNamespacePrefix" = importNamespacePrefix
	}
	template : "eglTemplates/odesignToTs/canvasRootElement.egl"
	target : pathPrefix + "src/elementCreation/elementFactory.ts"
}

// Rule 3.0 set up imports for node mappings
rule generateActiveToolManagement transform one : Any in: "".asSequence() {
	template : "eglTemplates/static/activeToolManagement.egl"
	target : pathPrefix + "src/mappings/activeToolManagement.ts"
}

// Rule 3.0 set up imports for node mappings
rule generateNodeMappingImports transform one : Any in: "".asSequence() {
	template : "eglTemplates/static/importsAndVariables/nodeMappingImportSetup.egl"
	target : pathPrefix + "src/mappings/nodeMappings.ts"
}

// Rule 3.1
// Get node elements, which are allowed to be created
// Generate a creation function for them
//	identifier: nodeCreationDescription.name()
rule generateNodeCreationSection transform nodeCreationDescription : NodeCreationDescription
	in: nodeCreationDescriptions {
	template : "eglTemplates/odesignToTs/nodeCreation.egl"
	target : pathPrefix + "src/mappings/nodeMappings.ts"
	append: true
}

// Rule 3.2
// Get NodeMappings (non container)
// Generate graphical representation in JointJS
// Map new elements
rule generateNodeMappingSection transform nodeMapping : NodeMapping
	in: targetLayer.nodeMappings {
	template : "eglTemplates/odesignToTs/nodeMappingCreation.egl"
	target : pathPrefix + "src/mappings/nodeMappings.ts"
	append: true
}


// Rule 4.0 set up imports and variables for relation based edge mappings
rule generateEdgeMappingImports transform one : Any in: "".asSequence() {
	template : "eglTemplates/static/importsAndVariables/edgeMappingsRelationBasedImportSetup.egl"
	target : pathPrefix + "src/mappings/edgeMappingsRelationBased.ts"
}
//
// Rule 4.1
// semantic edge creation
// get elements, which are allowed to be created from tool description
// call mappings generate
rule generateEdgeCreationSection transform edgeCreationDescription : EdgeCreationDescription
	in: edgeCreationDescriptions {
	template : "eglTemplates/odesignToTs/edgeCreationRelationBased.egl"
	target : pathPrefix + "src/mappings/edgeMappingsRelationBased.ts"
	append: true
}
//
// Rule 4.2
// Get EdgeMappings (relation based)
// Generate graphical representation in JointJS
// Map new elements
rule generateEdgeMappingCreationSection transform edgeMapping : EdgeMapping
	in: targetLayer.edgeMappings {
	template : "eglTemplates/odesignToTs/edgeMappingCreationRelationBased.egl"
	target : pathPrefix + "src/mappings/edgeMappingsRelationBased.ts"
	append: true
}

// Rule Tests.static.setup.Mocks
// generate tests for element factory
rule generateTestDocumentMocks transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/testTemplates/setup/documentMockTemplate.egl"
	target : pathPrefix + "src/__mocks__/documentMocks.ts"
}

// Rule Tests.static.ActiveToolManagement
// generate tests for active tool management
rule generateActiveToolManagementTests transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/testTemplates/activeToolManagementTestTemplate.egl"
	target : pathPrefix + "src/__tests__/activeToolManagementTest.ts"
}

// Rule Tests.static.EditorTests
// generate tests for editor
rule generateEditorTests transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/testTemplates/editorTestTemplate.egl"
	target : pathPrefix + "src/__tests__/editorTest.ts"
}

// Rule Tests.static.ElementFactoryTests
// generate tests for element factory
rule generateElementFactoryTests transform one : Any in: " ".asSequence() {
	template : "eglTemplates/static/testTemplates/elementFactoryTestTemplate.egl"
	target : pathPrefix + "src/__tests__/elementFactoryTest.ts"
}
